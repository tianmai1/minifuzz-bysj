[
    [
        "exploitable/tests/bin/testReturnAv.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                1, 
                22
            ], 
            "explanation": "The target crashed on a return instruction, which likely indicates stack corruption.", 
            "short_desc": "ReturnAv", 
            "desc": "Access violation during return instruction"
        }
    ], 
    [
        "exploitable/tests/bin/testStackBufferOverflow.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                3, 
                22
            ], 
            "explanation": "The target tried to access data at an address that matches the program counter. This is likely due to the execution of a branch instruction (ex: 'call') with a bad argument, but it could also be due to execution continuing past the end of a memory region or another cause. Regardless this likely indicates that the program counter contents are tainted and can be controlled by an attacker.", 
            "short_desc": "SegFaultOnPc", 
            "desc": "Segmentation fault on program counter"
        }
    ], 
    [
        "exploitable/tests/bin/testPossibleStackCorruption.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                7, 
                22
            ], 
            "explanation": "GDB generated an error while unwinding the stack and/or the stack contained return addresses that were not mapped in the inferior's process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.", 
            "short_desc": "PossibleStackCorruption", 
            "desc": "Possible stack corruption"
        }
    ], 
    [
        "exploitable/tests/bin/testStackCodeExecution.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                5, 
                22
            ], 
            "explanation": "The target stopped on an error while executing code within the process's stack region.", 
            "short_desc": "StackCodeExecution", 
            "desc": "Executing from stack"
        }
    ], 
    [
        "exploitable/tests/bin/testFloatingPointException.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                7, 
                22
            ], 
            "explanation": "GDB generated an error while unwinding the stack and/or the stack contained return addresses that were not mapped in the inferior's process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.", 
            "short_desc": "PossibleStackCorruption", 
            "desc": "Possible stack corruption"
        }
    ], 
    [
        "exploitable/tests/bin/testAbortSignal.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                7, 
                22
            ], 
            "explanation": "GDB generated an error while unwinding the stack and/or the stack contained return addresses that were not mapped in the inferior's process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.", 
            "short_desc": "PossibleStackCorruption", 
            "desc": "Possible stack corruption"
        }
    ], 
    [
        "exploitable/tests/bin/testHeapError.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                7, 
                22
            ], 
            "explanation": "GDB generated an error while unwinding the stack and/or the stack contained return addresses that were not mapped in the inferior's process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.", 
            "short_desc": "PossibleStackCorruption", 
            "desc": "Possible stack corruption"
        }
    ], 
    [
        "exploitable/tests/bin/testBadInstruction.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                9, 
                22
            ], 
            "explanation": "The target tried to execute a malformed or privileged instruction. This may indicate that the control flow is tainted.", 
            "short_desc": "BadInstruction", 
            "desc": "Bad instruction"
        }
    ], 
    [
        "exploitable/tests/bin/testSegFaultOnPc.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                9, 
                22
            ], 
            "explanation": "The target tried to execute a malformed or privileged instruction. This may indicate that the control flow is tainted.", 
            "short_desc": "BadInstruction", 
            "desc": "Bad instruction"
        }
    ], 
    [
        "exploitable/tests/bin/testDeepStack.test", 
        {
            "category": "PROBABLY_EXPLOITABLE", 
            "ranking": [
                11, 
                22
            ], 
            "explanation": "The target crashed on an access violation where the faulting instruction's mnemonic and the stack pointer seem to indicate a stack overflow.", 
            "short_desc": "StackOverflow", 
            "desc": "Stack overflow"
        }
    ], 
    [
        "exploitable/tests/bin/testSegFaultOnPcNearNull.test", 
        {
            "category": "PROBABLY_EXPLOITABLE", 
            "ranking": [
                12, 
                22
            ], 
            "explanation": "The target tried to access data at an address that matches the program counter. This may indicate that the program counter contents are tainted, however, it may also indicate a simple NULL deference.", 
            "short_desc": "SegFaultOnPcNearNull", 
            "desc": "Segmentation fault on program counter near NULL"
        }
    ], 
    [
        "exploitable/tests/bin/testUncategorizedSignal.test", 
        {
            "category": "EXPLOITABLE", 
            "ranking": [
                7, 
                22
            ], 
            "explanation": "GDB generated an error while unwinding the stack and/or the stack contained return addresses that were not mapped in the inferior's process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.", 
            "short_desc": "PossibleStackCorruption", 
            "desc": "Possible stack corruption"
        }
    ], 
    [
        "exploitable/tests/bin/testBranchAvNearNull.test", 
        {
            "category": "PROBABLY_EXPLOITABLE", 
            "ranking": [
                12, 
                22
            ], 
            "explanation": "The target tried to access data at an address that matches the program counter. This may indicate that the program counter contents are tainted, however, it may also indicate a simple NULL deference.", 
            "short_desc": "SegFaultOnPcNearNull", 
            "desc": "Segmentation fault on program counter near NULL"
        }
    ], 
    [
        "exploitable/tests/bin/testSourceAv.test", 
        {
            "category": "PROBABLY_NOT_EXPLOITABLE", 
            "ranking": [
                16, 
                22
            ], 
            "explanation": "The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation, which may mean the application crashed on a simple NULL dereference to data structure that has no immediate effect on control of the processor.", 
            "short_desc": "SourceAvNearNull", 
            "desc": "Access violation near NULL on source operand"
        }
    ], 
    [
        "exploitable/tests/bin/testBenignSignal.test", 
        {
            "category": "PROBABLY_NOT_EXPLOITABLE", 
            "ranking": [
                18, 
                22
            ], 
            "explanation": "The target is stopped on a signal that either does not indicate an error or indicates an error that is generally not considered exploitable.", 
            "short_desc": "BenignSignal", 
            "desc": "Benign signal"
        }
    ]
]